1、https://zhuanlan.zhihu.com/p/55648494：单目摄像头标定与畸变矫正

摄像头的畸变会让人们看到的图像出现“拉伸”或“扭曲”的直观感受，出现“横不平，竖不直”的现象。虽然畸变现象改变了图像原有的面貌，但在日常生活中也有很多应用之处，比如转弯路口的凸透镜，汽车的左右后视镜等，利用畸变效果扩大视野。

但在利用图像进行测量或者识别时，为了保证精度，在这种场景下，就需要尽量还原图像，也就是所说的“畸变矫正”。

在进行畸变矫正之前，我们需要简单的理解产生畸变的原因。通常畸变可以分为两种，一种是径向畸变，一种是切向畸变。
（1）径向畸变有两种形态，即桶形畸变和枕形畸变，从效果上看一个突出，一个内凹。产生径像畸变的原因是光学镜头在生产制造的过程中，很难保证厚度的均匀，离透镜中心越远的地方光线弯曲越大，从而产生径向畸变。
（2）切向畸变从效果上看，一个平直的物体在照片中看上去会有“倾斜”，“大小不一”的现象。出现切向畸变的原因是由于镜头与图像传感器不完全平行造成的。

摄像头参数：

（1）相机矩阵：包括焦距（fx，fy），光学中心（Cx，Cy），完全取决于相机本身，是相机的固有属性，只需要计算一次，可用矩阵表示如下：[fx, 0, Cx; 0, fy, cy; 0,0,1]。
（2）畸变系数：畸变数学模型的5个参数 D = （k1，k2， P1， P2， k3）。
（3）相机内参：相机矩阵和畸变系数统称为相机内参，在不考虑畸变的时候，相机矩阵也会被称为相机内参。
（4）相机外参：通过旋转和平移变换将3D的坐标转换为相机2维的坐标，其中的旋转矩阵和平移矩阵就被称为相机的外参；描述的是将世界坐标系转换成相机坐标系的过程。


2、摄像头标定的流程：

相机的标定过程实际上就是在4个坐标系转化的过程中求出相机的内参和外参的过程。这4个坐标系分别是：世界坐标系（描述物体真实位置），相机坐标系（摄像头镜头中心），图像坐标系（图像传感器成像中心，图片中心，影布中心，单位mm），像素坐标系（图像左上角为原点，描述像素的位置，单位是多少行，多少列）。

（1）世界坐标系 --> 相机坐标系：求解摄像头外参（旋转和平移矩阵）。
（2）相机坐标系 --> 图像坐标系：求解相机内参（摄像头矩阵和畸变系数）。
（3）图像坐标系 --> 像素坐标系：求解像素转化矩阵（可简单理解为原点从图片中心到左上角，单位厘米变行列）。

所以说，在解决像素标定的时候，我们只涉及相机坐标系和图像坐标系？？？



3、import glob
glob是python自带的一个操作文件的相关模块，用它可以查找符合特定规则的文件路径名。

glob.glob(pathname) 返回所有匹配的文件路径列表。它只有一个参数pathname，定义了文件路径匹配规则，这里可以是绝对路径，也可以是相对路径。


4、cv2.findChessboardCorners()函数：

FindChessboardCorners是opencv的一个函数，可以用来寻找棋盘图的内角点位置。

参数说明：

Image:输入的棋盘图，必须是8位的灰度或者彩色图像。
pattern_size:棋盘图中每行和每列角点的个数。
Corners:检测到的角点。
corner_count:输出角点的个数。


5、cv2.cornerSubPix函数：

6、cv2.drawChessboardCorners函数：源码分析：https://www.codingdict.com/sources/py/cv2/4536.html

7、cv2.calibrateCamera函数：

获取到棋盘标定图的内角点图像坐标之后，就可以使用calibrateCamera函数进行标定，计算相机内参和外参系数。

第一个参数objectPoints，世界坐标系中的三维点。需要依据棋盘上单个黑白矩阵的大小，计算出每一个内角点的世界坐标。
第二个参数imagePoints，为每一个内角点对应的图像坐标点。
第三个参数imageSize，为图像的像素尺寸大小，在计算相机的内参和畸变矩阵时需要使用到该参数。


8、在研究坐标映射的相关问题时，遇到棋盘坐标匹配出错的问题。其中涉及到一个关键函数FindChessboardCorners。
FindChessboardCorners是opencv的一个函数，可以用来寻找棋盘图的内角点位置。

int cvFindChessboardCorners( const void* image, CvSize pattern_size, CvPoint2D32f* corners, int* corner_count=NULL, int flags=CV_CALIB_CB_ADAPTIVE_THRESH );

Image:输入的棋盘图，必须是8位的灰度或者彩色图像。
pattern_size:棋盘图中每行和每列角点的个数。
Corners:检测到的角点。
corner_count:输出，角点的个数。如果不是NULL，函数将检测到的角点的个数存储于此变量。

函数cvFindChessboardCorners试图确定输入图像是否是棋盘模式，并确定角点的位置。如果所有角点都被检测到且它们都被以一定顺序排布，函数返回非零值，否则在函数不能发现所有角点或者记录它们地情况下，函数返回0。例如一个正常地棋盘图右8x8个方块和7x7个内角点，内角点是黑色方块相互联通的位置。这个函数检测到的坐标只是一个大约的值，如果要精确地确定它们的位置，可以使用函数cvFindCornerSubPix。


9、Opencv中的标定模块常用的标定函数：cv2.calibrateCamera

objectPoints为世界坐标系中的点。在使用时，应该输入一个三维点的vector的vector。
imagePoints为其对应的图像点。
imageSize为图像的大小，在计算相机的内参数和畸变矩阵需要用到。


10、 OpenCV使用棋盘格板进行标定。为了标定相机，我们需要输入一系列三维点和它们对应的二维图像点。在黑白相间的棋盘格上，二维图像点很容易通过角点检测找到。而对于真实世界中的三维点呢？由于我们采集中，是将相机放在一个地方，而将棋盘格定标板进行移动变换不同的位置，然后对其进行拍摄。所以我们需要知道(X,Y,Z)的值。但是简单来说，我们定义棋盘格所在平面为XY平面，即Z=0。对于定标板来说，我们可以知道棋盘格的方块尺寸，例如30mm，这样我们就可以把棋盘格上的角点坐标定义为(0,0,0)，(30,0,0)，(60,0,0)，···，这个结果的单位是mm。

3D点称为object points，2D图像点称为image points。

为了找到棋盘格模板，我们使用openCV中的函数cv2.findChessboardCorners()。我们也需要告诉程序我们使用的模板是什么规格的，例如8*8的棋盘格或者5*5棋盘格等，建议使用x方向和y方向个数不相等的棋盘格模板。下面实验中，我们使用的是10*7的棋盘格，每个方格边长是20mm，即含有9*6的内部角点。找到角点后，我们可以使用cv2.cornerSubPix()可以得到更为准确的角点像素坐标。我们也可以使用cv2.drawChessboardCorners()将角点绘制到图像上显示。

通过上面的步骤，我们得到了用于标定的三维点和与其对应的图像上的二维点对。我们使用cv2.calibrateCamera()进行标定，这个函数会返回标定结果、相机的内参数矩阵、畸变系数、旋转矩阵和平移向量。然后我们就可以使用新得到的内参数矩阵和畸变系数对图像进行去畸变了。


11、cv2.undistort()函数：

利用求得的相机的内参和外参数据，可以对图像进行畸变的矫正，使用undistort函数实现，其函数参数如下：
第一个参数src，输入参数，代表畸变的原始图像。
第二个参数cameraMatrix，为之前求得的相机的内参矩阵。
第三个参数distCoeffs，为之前求得的相机畸变矩阵。
第四个参数dst，矫正后的输出图像，跟输入图像具有相同的类型和大小。
第五个参数newCameraMatrix，默认跟cameraMatrix保持一致。


12、张正友标定法论文：“Flexible camera calibration by viewing a plane from unknown orientations”。
https://blog.csdn.net/heroacool/article/details/50286677


13、阅读张正友标定法的细节之后，我开始深刻思考需要满足的假定条件，此时我发现拍摄照片的时候是有很多潜在要求的！！！

这个参数估计的思想很简单，就是给定一组点的真实坐标(X, Y, Z)，给定该点在图片中的投影位置(u，v)。它们之间有一个计算关系式，中间一堆未知参数其实就是我们需要估计的东西，包括缩放因子s、外参矩阵[R t]、内参矩阵A。其实就是利用一个PNP问题模型将这些点组对应起来了。

由此得到n个方程组，我们只要利用线性代数中的解方程原理，即可得到想要求出的未知参数值。

但这个算法求解过程中有些假定，这就导致后面我们有些操作需要按照要求处理。

（1）算法相当于固定了相机坐标系、世界坐标系这两个基础，所以在拍摄图片过程中，相机位置不能移动，世界坐标系得记住是同一位置不能时刻变化。

（2）算法假定棋盘格在世界坐标系中的Z坐标始终为0，这也就意味着，我们永远只能在一个平面内移动棋盘格，不能随意倾斜或前拉或后拉，怪不得杨光之前把棋盘格固定在墙上......我们之前那种图片抓取方法是错误的，因为每一次的Z轴坐标已经变了。

（3）我难以理解的是？？？为什么在算法输入时，可以始终把真实场景下的三维坐标 (X,Y,Z) 始终用索引来替代呢？？？是不是放缩因子的影响？？？那这样的话，绝对又会对拍摄操作造成一定的限制......



14、f_x, f_y are the x and y focal lengths ( yes, they are usually the same ).

也就是杨光之前告诉我的，计算出来的fx、fy值大致是相同的。

c_x，c_y是图像平面中光学中心的x和y坐标。使用图像的中心通常是一个足够好的近似值。
所以之前我在做头部姿态估计的时候，用的就是近似内参矩阵：

focal_length = size[1]    # 1200
center = [size[1]/2, size[0]/2]    # [600, 337.5] 
camera_matrix = np.array([[focal_length, 0, center[0]], [0, focal_length, center[1]], [0, 0, 1]])

fx和fy用的都是图像的宽来近似，cx、cy分别用的是图像的长/2、宽/2来近似。
这个方法极其实用，一般可以拿来验证我们矫正的到底对不对。


15、推荐英文博客：https://learnopencv.com/camera-calibration-using-opencv/

16、In OpenCV the camera intrinsic matrix does not have the skew parameter.
在OpenCV中，相机固有矩阵没有“倾斜”参数。

也就是说，坐标系之间是默认正交的，内参矩阵形如：[[fx, 0, cx], [0, fy, cy], [0, 0, 1]]


17、相机矫正的不同方法：

（1）校准模式：当我们完全控制成像过程时，执行校准的最佳方法是从不同的视点捕获已知尺寸的对象或模式的多个图像。我们将在本文中学习的基于棋盘的方法属于这一类。我们也可以使用已知尺寸的圆形图案代替棋盘格图案。

（2）几何线索：有时我们在场景中有其他几何线索，如直线和消失点，可用于校准。

（3）基于深度学习：当我们对成像设置几乎没有控制时（例如，我们有一幅场景图像），仍然可以使用基于深度学习的方法获取相机的校准信息。


18、使用棋盘格图案定义真实世界坐标：

我们的世界坐标是由这个棋盘格图案固定的，它附着在房间的墙上。我们的3D点是棋盘格中正方形的角。可以选择上面板的任何一个角作为世界坐标系的原点。X轴和Y轴沿墙，并且Z轴垂直于墙。因此，棋盘上的所有点都位于XY平面上，Z=0。

对于3D点，我们在许多不同方向上拍摄具有已知尺寸的棋盘格图案。世界坐标系附着在棋盘上，因此所有的角点都位于一个平面上，所以我们可以任意选择Z，使每个点Z都为0。由于点在棋盘中的间距相等，通过将一个点作为参考点（0，0）并定义相对于该参考点的剩余坐标，可以轻松定义每个三维点的（X_w，Y_w）坐标。

哦哦哦！！！怪不得可以直接按照索引赋值，这里三维坐标系我可以任意定义出它的单位距离，由于我只需要内参又不需要外参，因此这样做虽然会影响我的还原为三维空间的坐标值，但不会影响到我们的内参尺寸。


19、为什么要使用棋盘格呢？

因为棋盘格是交叉垂直的，因此无论以什么角度，我们都可以通过设置一个合适的世界坐标系，将第1个位置的棋盘格3D坐标设置成(0, 0, 0)，其余格子都依次交叉排列，得到3D坐标信息。

棋盘格图案清晰，易于在图像中检测。不仅如此，棋盘格上的方块角非常适合定位它们，因为它们在两个方向上有尖锐的渐变。
此外，这些角点也与它们位于棋盘格线的交点有关。所有这些事实都用于在棋盘模式中可靠地定位正方形的角。


20、近似进行相机内参估计：

In other words, you need to know the focal length of the camera, the optical center in the image and the radial distortion parameters. So you need to calibrate your camera. Of course, for the lazy dudes and dudettes among us, this is too much work. Can I supply a hack ? Of course, I can! We are already in approximation land by not using an accurate 3D model.

We can approximate the optical center by the center of the image, approximate the focal length by the width of the image in pixels and assume that radial distortion does not exist.


21、在opencv函数中总有一些奇奇怪怪的输入：
ret, corners = cv2.findChessboardCorners(gray, CHECKERBOARD, cv2.CALIB_CB_ADAPTIVE_THRESH +
                                             cv2.CALIB_CB_FAST_CHECK + cv2.CALIB_CB_NORMALIZE_IMAGE)

它们是各种操作标志。只有当事情不顺利时，你才需要担心这些。使用默认值。
findChessboardCorners(InputArray image, Size patternSize, OutputArray corners, int flags = CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE )


22、好的校准是关于精度的。为了获得好的结果，重要的是获得亚像素级精度的角点位置。OpenCV的函数cornerSubPix接收原始图像和角点位置，并在原始位置的一个小邻域内查找最佳角点位置。

OpenCV的函数cornerSubPix接收原始图像和角点位置，并在原始位置的一个小邻域内查找最佳角点位置。该算法本质上是迭代的，因此我们需要指定终止标准（例如迭代次数和/或精度）。

corners2 = cv2.cornerSubPix(gray, corners, (11, 11), (-1, -1), criteria)
终止角点细化迭代过程的标准：也就是说，在criteria.maxCount迭代之后，或者在某次迭代中角点位置移动小于criteria.epsilon时，角点位置优化过程停止。

winSize：Half of the side length of the search window. 
zeroZone：在搜索区域中间的死区大小的一半，在下面的公式中求和不做。它有时用于避免自相关矩阵的可能奇异性。值（-1，-1）表示没有这样的大小。


23、我发现，cv2.calibrateCamera(objectPoints, imagePoints, imageSize)函数返回的是每一张图片的旋转外参矩阵和平移外参矩阵，也就是说，对于每张图片，我世界坐标系的位置是可以移动的！！！不必每张照片都同一个。

就像杨光说的那样，它觉得多姿态照片的作用，只是为了取个内参的平均值，其实用一张图片足以计算出参数值。
